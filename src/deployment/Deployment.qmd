---
title: "Deployment Guide"
date: "today"
author: "Vet Scientia Team"
version: "Alpha"
css: ../styles.css
format: 
   html:
     embed-resources: true
     toc: true
     toc-depth: 3
     number-sections: true
     code-copy: false
editor: source
execute: 
  error: true
  echo: true
  message: false
  warning: false
---

# Introduction

The following document aimed for system administrators and developers to guide them through the installation and deployment of our application

# Web Portal

## Prerequisites 

Please make sure you have the following the software installed on your machine before starting development and deployment

1. Computer with an account with administrator privileges 
2. NodeJS and npm
3. A code editor \(VS Code is recommended\)
4. Git client with credentials linked to Github
5. \(Optional but suggested\) Mongo Compass for database management

## Cloning the Project

The following section will guide you through cloning the project from our source control platform, GitHub down to your local machine

::: {.callout-note}
Before getting started make sure you have access to GitHub repo with read & write access  
:::

There are three primary ways to clone this project to your local machine:

1. Git CLI
2. Source Control 
3. Git GUI tools

### Cloning Trough CLI

To clone the project from the Git CLI:

::: {.callout-tip}
You might want to make a new folder for this project.  In the terminal you can make a new directory using the `mkdir(1)` command `mkdir <directory name>` 
:::

1. Open a new terminal window
2. Change to the directory you would like to clone the project to
3. Run `git@github.com:CPSECapstone/VS-Frontend.git`
4. Open that directory `cd VS-Frontend` and run `code` to open the project in VS Code[^1]

[^1]: If you prefer you can continue the following steps in the terminal 

### Cloning Through VSCode
1. Open VS Code
2. Select the Source Control ![](../assets//source-control.svg){width=20} tab from the left hand navigation menu 
3. Click `Clone Repository`
4. Click `Clone from GitHub`
    1. If asked if the GitHub extension can access your GitHub account Select `Allow`
    2. Select your GitHub account[^2]
    3. Select `CPSECapstone/VS-Frontend`
5. Pick a destination directory for this repository to be stored locally.

For more reference on using Git through VS Code check out this [guide](https://code.visualstudio.com/docs/sourcecontrol/overview) by the VS Code team.

[^2]: You may need to sign in to Github and grant VS code access to your Github repositories.

### Cloning Through the Github Desktop

1. Open GitHub Desktop
2. From the top menu, Select `File` > `Clone Repository`
3. Select the tab `Github.com`
4. In the search bar type `CPSECapstone/VS-Frontend`
5. Select the repository from the search results
6. Choose a directory for the clone project to be stored locally
7. Click `Clone`

## Getting Dependencies 

As this is a NodeJS web project we will need to install some dependencies both for the front and backend before we can start development and deployment locally

### Frontend

1. Change into the frontend directory of the monorepo `cd ./frontend`
2. Run `npm install`

### Backend

1. Change into the frontend directory of the monorepo `cd ./frontend`
2. Run `npm install`

## Environment Variables 

Our project has many secrets such as connections URLs and passwords which are not committed to our version control system for security purposes 

Please obtain these credentials from the super-admins
Afterwards,

1. Change to the frontend directory `cd ./frontend`
2. Make a new file and name it `.env`
3. Paste in the credentials related to `VITE_APP_BASE_URL` in the format `VITE_APP_BASE_URL=<value>` where the `<value>` represents the credentials obtained 

    ``` js
    VITE_APP_BASE_URL="https://xyz.com:8080/"
    ```

4. Go to the backend directory `cd ../backend`
5. Create another file name `.env`
6. Paste in obtained credentials related to `MONGODB_URI`, `PORT`, and `SECRET_KEY` in the same format `<variable>=<value>`

    ``` js
    MONGODB_URI=MONGO_DATABASE_URL
    PORT=PORT_NUMBER_FOR_EXPRESS_SERVER
    SECRET_KEY=VERY_SECRET_KEY
    ```

## Formatting Code

This project uses prettier as our default formatter
To use it in VSCode
1. Make sure you have the prettier VS Code extension installed

:::{.callout-tip}
You can use the keyboard shortcut `CTRL`+`,` \(or `CMD`+`,` on a Mac\) to access the settings menu 
:::

2. Click the Settings icon on the bottom left of VS Code, followed by `Settings`
3. In the search felid type in type `Formatter`
4. From the search results select `Text Editor`
5. Under `Editor Default Formatter` select `Prettier-Code formatter`
6. Close Settings by clicking the "X" \(dot for the currently selected tab\) next to the settings tab

### \(Alternative\) Installing Prettier Through the CLI

If you prefer to run prettier through the terminal or are not using VS Code

:::{.callout-tip}
If you are in the frontend directory you can also just run `npm format` to format all files in the frontend folder
:::

1. Install Prettier `npm install --save-dev --save-exact prettier`
2. Open the part of the repo you would like to format \(Ex : `frontend` then  `cd ./frontend`\)
3. Run `prettier --write <path>`  Ex : `prettier --write ./src` to format all the files in the `src` folder


## Linting

We use ESLint as our linter for the this project


To run linting for the project

1. Change to the frontend directory `cd ./frontend` or backend directory `cd ./backend`
2. Run `npm lint`

## Testing

:::{.callout-note}
Testing is currently only setup in the frontend part of the project, we will also work on getting it setup on the backend before release too.
:::

1. Change to the frontend directory `cd ./frontend`
2. Run `npm test`

## Installation Locally

The following steps will show how start our web application from your local machine.

:::{.callout-note}
Before you start, make sure you have all npm packages installed and your environment files have been created & set.
:::

### Running the backend

1. Change to the backend folder `cd ./backend`
2. To run the server in deployment mode run `npm run dev`
3. To run the server in production mode run `npm run start`

### Running the frontend in development mode

1. Change to the frontend folder `cd ./frontend`
2. To start the Vite development server run `npm run start`

### Running the frontend in deployment mode

1. Change to the frontend folder `cd ./frontend`
2. Compile the Vite React app using `npm run build` 
    - The newly created build will be located in `./dist`
3. To run deployment build using Vite run `npm run serve`

:::{.callout-tip}
Alternatively, if you have Python installed you can use its HTTP server. 
Change to the `./dist` folder. Then, in the terminal run `python3 -m http.server`
:::

## Deployment on the Cloud

Our web application will be hosted on a mixture of AWS and Azure infostracuture 
By default if you commit code to the `CPSECapstone/VS-Frontend` or `CPSECapstone/VS-Frontend` main branch or make a PR to the main branch changes will automatically get deployed to our Azure services

### Deployment of the Frontend Using Azure Static Web App

1. Head to [Azure site](https://azure.microsoft.com/en-us/pricing/purchase-options/azure-account/search?ef_id=_k_CjwKCAjw5PK_BhBBEiwAL7GTPYLqxR0heIP7vCOIo1s7IK8PdeRPmQo3IdrYagaZghn1olndJkjdABoCOrcQAvD_BwE_k_&OCID=AIDcmmfq865whp_SEM__k_CjwKCAjw5PK_BhBBEiwAL7GTPYLqxR0heIP7vCOIo1s7IK8PdeRPmQo3IdrYagaZghn1olndJkjdABoCOrcQAvD_BwE_k_&gad_source=1&gbraid=0AAAAADcJh_tgWDQhaNlmVCfX0GJ6Km5si&gclid=CjwKCAjw5PK_BhBBEiwAL7GTPYLqxR0heIP7vCOIo1s7IK8PdeRPmQo3IdrYagaZghn1olndJkjdABoCOrcQAvD_BwE) 
2. Click `Sign In`
3. Sign into your Azure account
  Notes:
    - It is suggested if you use the `Sign in with GitHub` options
    - If you decide to use an email \(Microsoft Account\), it is suggested to use the **same** email as your Github for easier computability 
4. Once on the dashboard, Click `Add New Resource`
5. Search for `Static Web App`
6. Click `Create`
7. Select your Subscription[^3] \(Ex : For us its `Professor K`\)
8. For Resource Group, select `(New) Resource Group`
9. Give a name for this Static Web App \(Ex : `VetScientia-Frontend`\)
10. 

[^3]: Subscription is the billing group that your Azure services will be charged to
### Deployment of the Backend Using Azure Web App

# Simulation

## Using the Simulator

Test out using the simulation with [Vet Scientia Demo](https://vs-capstone.itch.io/vs-demo).

To focus on the animal, click the animal.

To check the animal's vitals, focus on the animal and then hover over the animal. You will see a popup of the vitals like heart rate and respiratory rate.

To exit focus on any object, click the back button located towards the bottom of the screen.

To examine the drugs, click the cabinet on the left.

To look at the name of a drug, hover over the drug.

To equip a drug, click the drug bottle.

To get a short description of the drug, click the thumbnail of the drug.

To apply a drug to the animal, equip the drug, focus on the animal, and then click the animal. The drug thumbnail should disappear.